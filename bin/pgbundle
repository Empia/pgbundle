#!/usr/bin/env ruby
require 'thor'
require 'thor/group'
require 'pgbundle'

module PgBundle
  class Cli < Thor
    desc 'install', 'installs extensions'
    method_options %w( force -f ) => :boolean
    def install(pgfile = 'Pgfile')
      if options.force?
        installed = definitions(pgfile).inject({}){|m, d| m[d.database] = d.install!; m}
      else
        definitions(pgfile).each do |d|
          d.available_extensions.each do |dep|
            say_status('exists', "#{d.database}: #{dep.name}")
          end
        end

        installed = definitions(pgfile).inject({}){|m, d| m[d.database] = d.install; m}
      end

      installed.each do |db, deps|
        deps.each do |d|
          say_status('install', "#{db}: #{d.name}", :yellow)
        end
      end
    rescue InstallError, ExtensionCreateError, CircularDependencyError => e
      say_status('error', e.message, :red)
      exit 1
    end

    desc 'check', 'checks availability of required extensions'
    def check(pgfile = 'Pgfile')
      missing = false
      definitions(pgfile).each do |df|
        df.check.each do |d|
          if d[:created]
            say_status('created', "#{df.database}: #{d[:name]}")
          else
            unless d[:installed]
              say_status('missing', "#{df.database}: #{d[:name]}", :red)
              missing = true
            end
            say_status('installed', "#{df.database}: #{d[:name]}", :yellow) if d[:installed]
          end
        end
      end
      exit 1 if missing
    end

    desc 'create', 'create the extension at the desired version'
    def create(pgfile = 'Pgfile')
      definitions(pgfile).each do |df|
        df.create.each do | d |
          say_status('created', "#{df.database}: #{d.name}")
        end
      end
    end

    desc 'init', 'write an initial pgfile to stdout'
    method_options %w( user -u ) => :string
    method_options %w( host -h ) => :string
    def init(db_name)
      definition = PgBundle::Definition.new
      definition.database = PgBundle::Database.new(db_name, options)
      say("found the following definition for your current database:\n\n")
      say definition.init.join("\n")
    end

    no_commands do
      def definitions(pgfile)
        definitions = Dsl.new.eval_pgfile(pgfile)
        definitions.map(&:link_dependencies)
      end
    end
  end
end

PgBundle::Cli.start(ARGV)
